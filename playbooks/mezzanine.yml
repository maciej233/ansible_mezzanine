---

- name: Deploy mezzanine in nginx server using gunicorn
  hosts: webserver
  vars:
    user: "{{ ansible_ssh_user }}"
    proj_name: mezzanine_example
    venv_home: "{{ ansible_env.HOME }}"
    venv_path: "{{ venv_home }}/{{ proj_name }}"
    proj_dirname: project
    proj_path: "{{ venv_path }}/{{ proj_dirname}}"
    regs_path: requirments.txt
    manage: "{{ python }} / {{ proj_path }}/manage.py"
    live_hostname: 192.133.33.10.xip.io
    domain:
      - 192.168.33.10.xip.io
      - www.192.168.33.10.xip.io
    repo_url: git@github.com:maciej233/ansible_mezzanine.git
    gunicron_port: 8000
    locale: UTF-8
    conf_path: /etc/nginx/conf
    tls_enables: True
    python: "{{ venv_path}}/bin/python"
    databse_name: "{{ proj_name }}"
    databse_user: "{{ proj_name }}"
    databse_host: localhost
    databse_port: 5432
    gunicron_proc_name: mezzanine

  vars_files:
    - secret.yml

  tasks:
  - name: install apt packages
    apt: pkg={{item}} update_cache=yes cache_vaild_time=3600
    become: True
    with_item:
      - git
      - libjpeg_dev
      - libpq-dev
      - memcached
      - nginx
      - postgresql
      - python-dev
      - python-pip
      - python-psycopg2
      - python-setuptools
      - python-virtualenv
      - supervisor

  - name: install pip packages
    pip: name={{item}} virtualenv={{venv_path}}
    with_itmes:
      - gunicorn
      - setproctitle
      - south
      - psycopg2
      - django-compressor
      - python-memcached

  - name: install requiremtns.txt
    pip: requirements={{proj_path}}/{{regs_path}} virtualenv={{venv_path}}

  - name: check repository
    git: repo={{repo_url}} dest={{proj_path}} accept_hostkey=yes

  # create database and database user
  - name: create user
    postgresql_user:
      name: "{{ databse_user }}"
      password: "{{ db_pass }}"
    become: True
    become_user: postgres

  - name: create database
    postgresql_db:
      name: "{{ databse_name }}"
      owner: "{{ database_user }}"
      encoding: UTF-8
      lc_ctype: "{{ locale }}"
      lc_collate: "{{ locale }}"
      template: template0
    become: True
    become_user: postgres

  - name: generate settings files
    template:
      src: templates/local_settings.py.j2
      dest: "{{ proj_path }}/local_settings.py"

  - name: sync the databse, apply migratiions. collect static content
    django_manage:
      command: {{item}}
      app_path: {{proj_path}}
      virtualenv: {{venv_path}}
    with_item:
      - syncdb
      - migrate
      - collectstatic

  - name: set the site id
    script: scripts/setsite.py
    environment:
      PATH: "{{ venv_path }}/bin"
      PROJECT_DIR: "{{ proj_path }}"
      WEBSITE_DOMAIN: "{{ live_hostname }}"
  - name: set the admin password
    script: scripts/setadmin.py
    environment:
      PATH: "{{ venv_path }}/bin"
      PROJECT_DIR: "{{ proj_path }}"
      ADMIN_PASSWORD: "{{ admin_pass }}"
  - name: set the gunicorn config file
    template:
      src: templates/gunicorn.conf.py.j2
      dest: "{{ proj_path }}/gunicorn.conf.py"
  - name: set the supervisor config file
    template:
      src: templates/supervisor.conf.j2
      dest: /etc/supervisor/conf.d/mezzanine.conf
    sudo: True
    notify: restart supervisor
  - name: set the nginx config file
    template:
      src: templates/nginx.conf.j2
      dest: /etc/nginx/sites-available/mezzanine.conf
    notify: restart nginx
    sudo: True

  - name: enable the nginx config file
    file:
      src: /etc/nginx/sites-available/mezzanine.conf
      dest: /etc/nginx/sites-enabled/mezzanine.conf
      state: link
    notify: restart nginx
    sudo: True

  - name: remove the default nginx config file
    file: path=/etc/nginx/sites-enabled/default state=absent
    notify: restart nginx
    sudo: True

  - name: ensure config path exists
    file: path={{ conf_path }} state=directory
    sudo: True
    when: tls_enabled

  - name: create tls certificates
    command: >
      openssl req -new -x509 -nodes -out {{ proj_name }}.crt
      -keyout {{ proj_name }}.key -subj '/CN={{ domains[0] }}' -days 3650
      chdir={{ conf_path }}
      creates={{ conf_path }}/{{ proj_name }}.crt
    sudo: True
    when: tls_enabled
    notify: restart nginx
  - name: install poll twitter cron job
    cron: name="poll twitter" minute="*/5" user={{ user }}
      job="{{ manage }} poll_twitter"
  handlers:
  - name: restart supervisor
    supervisorctl: name=gunicorn_mezzanine state=restarted
    sudo: True
  - name: restart nginx
    service: name=nginx state=restarted
    sudo: True